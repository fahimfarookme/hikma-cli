#+TITLE: HIKMA(1) User Manual
#+AUTHOR: Your Name/Project Maintainers
#+DATE: $(shell date +%Y-%m-%d)
#+MANUAL: User Commands
#+SECTION: 1
#+OPTIONS: toc:nil

* NAME
hikma - A Zsh Command-Line Interface for structured knowledge and task management.

* SYNOPSIS
*hikma* [_command_] [_sub-commands-and-arguments_...]

* DESCRIPTION
*hikma* is a tool for initializing and managing a structured workspace for your notes, projects, tasks, and other digital items. It leverages org-mode for item content and provides a configurable system for item creation, organization, and templating. The system is designed to be modular and extensible through Zsh scripts and a central configuration file.

Key operations include initializing a workspace, managing "concerns" (like projects or areas), and creating various types of items (notes, tasks, etc.) from predefined templates.

* COMMANDS
  The primary commands available in `hikma-cli` are defined in `bin/command_template.txt` and processed by `bin/hikma.zsh`.

  *help*
  *hikma help*
  *hikma -h*
  *hikma --help*
    Displays help information (typically from `doc/help.txt`).
    Handler: `handle_help`

  *init*
  *hikma init*
    Initializes a Hikma workspace in the current directory. This involves:
    - Creating predefined category directories (e.g., projects, areas, archives, resources) based on `.hikma_config`.
    - Copying a default `.hikma_config` file to the workspace root.
    - Initializing a Git repository in the workspace.
    - Optionally attempting to set the `HIKMA_WORKSPACE` environment variable in user's shell configuration files (`.bashrc`, `.zshrc`).
    Handler: `handle_init`

  *concern create* _category_ _name_
  *hikma concern create projects my-new-project*
    Creates a new concern (e.g., a project, an area) with the given _name_ within the specified _category_.
    - Validates the category and concern name.
    - Creates a directory for the concern (e.g., `projects/my-new-project`).
    - Initializes the concern's structure by copying files from a corresponding template directory (e.g., `templates/concern_project/`).
    - Replaces placeholders like `{{__category__}}`, `{{__concern__}}` in the copied template files.
    - Commits the creation to the Git repository.
    Handler: `handle_concern_create`

  *concern delete* _category_ _name_
  *hikma concern delete projects my-old-project*
    Deletes the specified concern from the given category after confirmation.
    - Removes the concern's directory.
    - Commits the deletion to Git using `git rm -rf`.
    Handler: `handle_concern_delete`

  *concern archive* _category_ _name_
  *hikma concern archive projects completed-project*
    Moves a concern from its current _category_ to the 'archives' category (as defined in `.hikma_config`). This is a special case of `concern mv`.
    Handler: `handle_concern_archive` (which typically calls `handle_concern_mv`)

  *concern mv* _source_category_ _name_ _destination_category_
  *hikma concern mv areas my-active-area projects*
    Moves a concern with the given _name_ from the _source_category_ to the _destination_category_.
    - Validates categories and concern existence.
    - Moves the directory.
    - Updates Git history for the move.
    Handler: `handle_concern_mv`

  *submodule create* _repo_url_ (and potentially _name_)
  *hikma submodule create https://github.com/user/repo.git*
    (Handler `handle_submodule_create` is referenced in `command_template.txt`. Functionality depends on its implementation, typically `git submodule add`).

  *submodule delete* _name_
  *hikma submodule delete my-submodule*
    (Handler `handle_submodule_delete` is referenced. Functionality depends on its implementation, typically `git submodule deinit` and `git rm`).

  *item path* _item-type_
  *hikma item path task*
    Prints the fully resolved, intended file path for a new item of the specified _item-type_ (e.g., task, email, journal). The path is determined by configuration in `.hikma_config` (e.g., `hikma.item_types.dir.<item-type>`) and the filename generated by the corresponding function (e.g., `hikma.item_types.filename.<item-type>`).
    Options for the item (like a title for slug generation) might be passed if the command regex and handler support it.
    Handler: `handle_item_path`

  *item content* _item-type_ [_template-variables_...]
  *hikma item content note --title "My New Note" --author "Me"*
    Prints the processed content of the template for the specified _item-type_.
    - Retrieves the template file path from `.hikma_config` (`hikma.item_types.template.<item-type>`).
    - Substitutes variables within the template content. Variables can be predefined (like `{{current_category}}`, resolved by functions in `variable_resolvers.zsh`) or passed as command-line options (e.g., `--title "value"`).
    Handler: `handle_item_content`

  *item create* _item-type_ [_template-variables_...]
  *hikma item create email --subject "Meeting Followup" --to "team@example.com"*
    Creates a new item file of the specified _item-type_.
    - Determines the file path using logic similar to `item path`.
    - Gets the processed template content using logic similar to `item content`.
    - Creates parent directories if they don't exist.
    - Writes the content to the new file.
    - Audits the creation.
    Handler: `handle_item_create`

* CONFIGURATION FILE (`.hikma_config`)
  The behavior of `hikma-cli` is heavily influenced by the `.hikma_config` file located in the root of the initialized workspace. This is a properties file (key=value).

  Key sections:
  - *`hikma.root`*: (Often informational, as `HIKMA_WORKSPACE` env var or current dir usually takes precedence for workspace detection).
  - *`hikma.variables.<varname>=<function_name>`*: Maps template variables (e.g., `{{current_context}}`) to Zsh functions (defined in `lib/variable_resolvers.zsh`) that provide their dynamic values. Examples:
    - `hikma.variables.current_context=get_current_context`
    - `hikma.variables.date=get_date`
  - *`hikma.categories=<cat1,cat2,...>`*: Defines the top-level directories in the workspace.
    - `hikma.categories.fallback`: Default category if context cannot be determined.
    - `hikma.categories.archives`: Specifies the name of the archives category.
  - *`hikma.item_types=<type1,type2,...>`*: Lists all recognized item types.
  - *`hikma.item_types.dir.<item-type>=<path_template>`*: Defines the directory structure for storing items of a specific type. Can use variables like `{{current_context}}` or `{{current_dir}}`. Example: `hikma.item_types.dir.email={{current_context}}/emails`.
  - *`hikma.item_types.filename.<item-type>=<function_name>`*: Specifies the Zsh function (from `lib/filename_generators.zsh`) responsible for generating the filename for this item type. Example: `hikma.item_types.filename.email=gen_email_name`.
  - *`hikma.item_types.template.<item-type>=<path_to_template.org>`*: Path to the org-mode template file used when creating this item type. Can use variables like `{{default_template_dir}}`. Example: `hikma.item_types.template.email={{default_template_dir}}/email.org`.
  - *`hikma.formats.document`*: Default extension for document items (e.g., `org`).
  - *`hikma.formats.date_time`*, *`hikma.formats.date`*: `strftime` compatible format strings for dates and timestamps used in filenames and templates.
  - *`hikma.commit_msg.*`*: Templates for Git commit messages for various actions.

* TEMPLATES
  `hikma-cli` uses org-mode templates for creating new items and for structuring new concerns.
  - *Item Templates*: Located in the directory specified by `{{default_template_dir}}` (usually `templates/` in the project structure). Examples: `email.org`, `task.org`, `meeting.org`. These templates can contain placeholders like `{{variable_name}}` or org-capture style placeholders like `%^{Title}`.
  - *Concern Templates*: Located in `templates/concern_<category_type>/`. For example, `templates/concern_project/` contains the default structure for new project concerns. These templates can also use placeholders like `{{__concern__}}`.

* ENVIRONMENT VARIABLES
  *`HIKMA_WORKSPACE`*
    If set, this path is considered the root of the hikma workspace, overriding automatic detection. The `hikma init` command attempts to set this in user's shell rc files (`.zshrc`, `.bashrc`).
  *`HIKMA_DEBUG`*
    If set to a non-empty value (e.g., `1`), enables more verbose debug logging to standard output. (Controlled by `xtrace` or `hikma_debug` variable in `lib/error.zsh`).

* EXIT STATUS
  `hikma-cli` uses specific exit codes defined in `lib/error.zsh`:
  - *0*: Success.
  - *`hikma_code_fatal` (default 128)*: Fatal error, script usually exits.
  - *`hikma_code_illegal_state` (default 129)*: Script is in an unexpected state.
  - *`hikma_code_wrong_usage` (default 130)*: Incorrect command-line arguments or usage.
  - *`hikma_code_wrong_input` (default 131)*: Invalid input provided by the user.
  Other non-zero values may indicate errors from underlying commands or specific script logic.

* FILES
  - *`${HIKMA_WORKSPACE}/.hikma_config`*: Main configuration file.
  - *`${HIKMA_WORKSPACE}/<category>/<concern>/`*: Directory structure for organized items.
  - *`${hikma_script_root}/bin/hikma.zsh`*: Main executable script.
  - *`${hikma_script_root}/bin/command_template.txt`*: Defines command patterns and handlers.
  - *`${hikma_script_root}/lib/*.zsh`*: Library scripts.
  - *`${hikma_script_root}/templates/`*: Default org-mode templates.
  - *`${hikma_script_root}/doc/help.txt`*: Content for `hikma help`.

* EXAMPLES
  Initialize a workspace in the current directory:
  #+BEGIN_SRC sh
  hikma init
  #+END_SRC

  Create a new project "alpha" and a task within it:
  #+BEGIN_SRC sh
  hikma concern create projects alpha
  cd projects/alpha
  hikma item create task --title "Setup initial requirements"
  #+END_SRC

  Create a journal entry (assuming 'journal' item type is configured to be in 'areas/journal'):
  #+BEGIN_SRC sh
  hikma item create journal
  #+END_SRC

* BUGS
  Please report any bugs to [Your Project's Issue Tracker URL or Email Address].

* AUTHOR
  Written by [Your Name or Organization].

* COPYRIGHT
  Copyright (C) $(shell date +%Y) [Your Name or Organization].
  License: [Specify Your License, e.g., MIT, GPLv3+]
  This is free software: you are free to change and redistribute it.
  There is NO WARRANTY, to the extent permitted by law.

* SEE ALSO
  *org-mode*(7), *zsh*(1), *git*(1)
  (The `item-design.org` document in the source `doc/` directory provides insights into the CLI design principles.)
